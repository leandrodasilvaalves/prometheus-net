services:
  entrypoint:
    container_name: entrypoint-prometheus
    image: api-test-prometheus
    build:
      context: ./api-prometheus
      dockerfile: Dockerfile
    ports:
      - 5180:80
    environment:
      - ASPNETCORE_URLS=http://+:80   
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - Rabbit__ReceiveEndpoint=entrypoint.prometheus
    networks:
      - observability
    mem_limit: 50M
    cpus: 0.25


  operational:
    container_name: operational-prometheus
    image: api-test-prometheus
    ports:
      - 5181:80
    environment:
      - ASPNETCORE_URLS=http://+:80   
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - Rabbit__ReceiveEndpoint=operational.prometheus
    networks:
      - observability
    depends_on:
      - entrypoint
    mem_limit: 50M
    cpus: 0.25


  core:
    container_name: core-prometheus
    image: api-test-prometheus
    ports:
      - 5182:80
    environment:
      - ASPNETCORE_URLS=http://+:80   
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - Rabbit__ReceiveEndpoint=core.prometheus
    networks:
      - observability
    depends_on:
      - entrypoint
    mem_limit: 50M
    cpus: 0.25
    
  
  worker:
    container_name: worker-prometheus
    image: api-test-prometheus
    ports:
      - 5183:80
    environment:
      - ASPNETCORE_URLS=http://+:80   
      - ASPNETCORE_ENVIRONMENT=${ASPNET_ENV}
      - Rabbit__ReceiveEndpoint=worker.prometheus
    networks:
      - observability
    depends_on:
      - entrypoint
    mem_limit: 50M
    cpus: 0.25


  rabbit:
    image: rabbitmq:3-management
    container_name: observability.rabbit
    ports:
      - "15672:15672"
      - "15692:15692"
      - "5672:5672"
    networks:
      - observability
    volumes:
      - ./rabbit/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro


  prometheus:
    image: prom/prometheus:v2.53.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alert.rule.yaml:/etc/prometheus/alerts.rules:ro
      - prometheus-storage:/prometheus:rw
    networks:
      - observability
    depends_on:
      - entrypoint
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:9090/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s
      

  alert-manager:
    image: prom/alertmanager:v0.27.0
    ports:
      - 9093:9093
    volumes:
      - ./prometheus/alertmanager/alertmanager.yaml:/prometheus/alertmanager.yml
      - ./prometheus/alertmanager/alertmanager-entrypoint.sh:/prometheus/entrypoint.sh
    entrypoint: ["/bin/sh", "/prometheus/entrypoint.sh"]
    # command:
    #   - '--config.file=/prometheus/alertmanager.yml'
    environment:
      - SLACK_API_URL=${SLACK_API_URL}
    networks:
      - observability

  grafana:
    image: grafana/grafana:10.4.4-ubuntu
    container_name: prometheusnetsample_grafana
    ports:
     - 3000:3000
    volumes:
        - ./grafana/provisioning/datasource:/etc/grafana/provisioning/datasources
        - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards  
        - grafana-storage:/var/lib/grafana:rw
    depends_on:
      prometheus:
            condition: service_healthy
    # environment:
    #   - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin # TODO: Essas vari√°veis habilitadas atrapalha instalar plugins. Analisar.
    #   - GF_AUTH_ANONYMOUS_ENABLED=true
    #   - GF_AUTH_BASIC_ENABLED=false
    #   - GF_ENABLE_GZIP=true
    networks:
      - observability  

volumes:
  grafana-storage: {}
  prometheus-storage: {}

networks:
  observability:
    driver: bridge